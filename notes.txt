JEST docs:
https://jestjs.io/docs/getting-started
- used to run tests

inquirer docs:
https://www.npmjs.com/package/inquirer/v/8.2.4
- used to run command-line prompts

DigitalOcean inquirer.js:
https://www.digitalocean.com/community/tutorials/nodejs-interactive-command-line-prompts

sample team profile generator:
https://github.com/JamesLJenks/10_OOP-Team-Profile-Generator/blob/master/__tests__/Employee.test.js




let role = '';
let name = '';

const promptsObj = {
    promptRole: {
        type: 'list',
        message: 'Select role from list below:',
        choices: ['engineer', 'intern',],
        name: 'role'
    },
    promptName: {
        type: 'input',
        message: `Enter name.`,
        name: 'name',
    },
    promptId: {
        type: 'number',
        message: `Enter employee id.`,
        name: 'id',
    },
    promptEmail: {
        type: 'input',
        message: `Enter email address.`,
        name: 'email',
    },
    promptOfficeNum: {
        type: 'number',
        message: `Enter manager's office number.`,
        name: 'office',
    },
    promptGitHub: {
        type: 'input',
        message: `Enter ${name}'s GitHub user name.`,
        name: 'github',
        description: 'engineer'
    },
    promptSchool: {
        type: 'input',
        message: `Enter the name of ${name}'s school.`,
        name: 'school',
        description: 'intern'
    },
    promptAddMore: {
        type: 'confirm',
        message: 'Would you like to add another employee?',
        name: 'add'
    }
}

const employeePrompts = [];

const promptRole =
{
    type: 'list',
    message: 'Select employee role from list below:',
    choices: ['engineer', 'intern',],
    name: 'role'
}

const promptGitHub =
{
    type: 'input',
    message: `Enter this ${this.name}'s GitHub user name.`,
    name: 'github',
    description: 'engineer'
}

const promptSchool =
{
    type: 'input',
    message: `Enter the ${this.name} of this intern's school.`,
    name: 'school',
    description: 'intern'
}

const promptAddMore = {
    type: 'confirm',
    message: 'Would you like to add another Employee?',
    name: 'add'
};


class Prompts {
    constructor(role) {
        this.role = role;
        console.log(this.role);
    }

    promptName() {
        const employeeName =
        {
            type: 'input',
            message: `Enter ${this.role}'s name.`,
            name: 'name',
        };
        console.log(employeeName);
        return employeeName;
    }

    promptEmployeeInfo() {
        const promptId =
        {
            type: 'number',
            message: `Enter ${this.name}'s employee id.`,
            name: 'id',
        };

        const promptEmail =
        {
            type: 'input',
            message: `Enter ${this.name}'s email address.`,
            name: 'email',
        };

        const promptOfficeNum =
        {
            type: 'number',
            message: `Enter ${this.name}'s office number.`,
            name: 'office',
        }
        console.log(promptId, promptEmail, promptOfficeNum);
        return promptId, promptEmail, promptOfficeNum;
    }
};

const addManager = new Prompts("manager", "Sid")
employeePrompts.push(addManager.promptName + addManager.promptEmployeeInfo)
addManager.promptName();
addManager.promptEmployeeInfo();
console.log(employeePrompts);
